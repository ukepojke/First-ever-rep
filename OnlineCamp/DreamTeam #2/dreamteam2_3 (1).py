# Все задания оборачиваются в функции






##################### ---- ФУНКЦИИ ---- ##############################

# Задание 1:
# Спросите у пользователя строку НА Английском или целое предложение и
# удалите все глассные буквы там.
# То что осталось от строки выведите на экран.
# Строка не должна быть короче 10 символов.

# b = ["a","e","i",'o',"u","y","A","E","I",'O',"U","Y"]
# while True:
#     a = input("Write at least 10 characters - ")
#     if len(a) >= 10:
#         for i in b:
#             if i in a:
#                 a = a.replace(i,"")
#         break
#     else:
#         print("Text too small")
#
# print(a)


################################################################################


# Задание 2:
# Вам дан набор данных accounts.
# Функция должна проходить по каждому листу состоящему из 3-х символов и
# найти ту
# где их сумма больше всего.

# accounts = [
#     [[1,5,5],[7,4,5],[1,3,5],[2,1,5],[7,3,9],[8,3,5],[1,5,0],[7,3,2],[9,3,5]],
#     [[1,5,3],[2,7,3],[6,3,5],[1,5,9],[7,3,3],[3,5,4],[1,5,6],[7,3,6],[3,5,8]],
#     [[1,5,3],[7,3,0],[3,5,4],[1,5,6],[7,3,2],[3,5,4],[1,5,9],[7,3,2],[3,5,0]],
#     [[1,5,1],[7,3,2],[3,5,3],[1,5,4],[7,3,5],[3,5,6],[1,5,7],[7,3,8],[3,5,9]],
# ]
#
# def sum_num(func):
#     a = []
#     b = []
#     c = []
#     d = []
#     for i in func[0]:
#         a.append(sum(i))
#     for i in func[1]:
#         b.append(sum(i))
#     for i in func[2]:
#         c.append(sum(i))
#     for i in func[3]:
#         d.append(sum(i))
#     print(max(sum(a),sum(b),sum(c),sum(d)))
#     print(f"2 list is the highest among others.")
#
#
# sum_num(accounts)

################################################################################


# Задание 3:
# Вам даны 2 листа:

# list_1 = ['a', 'bc', 'de']
# list_2 = ['ab', 'c', 'de']
#
# def sum_lst(a,b):
#     a = ["".join(a)]
#     b = ["".join(b)]
#     if a == b:
#         print("Lists are the same.")
#     else:
#         print("Lists are not the same.")
#
# sum_lst(list_1,list_2)


# Напишите функцию которая их принимает и сравнивает на равность.
# Пример где листы равны:

    # a + bc + de = abcde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['1', '23', 'abcde']

# Пример где листы НЕ равны:

    # a + cb + de = acbde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['123', 'de', 'abc']

################################################################################


# Задание 4:
# Известно что функция print() выводит на экран текст который Вы в ней указали.
# Известно что есть ещё один способ вывести на экран любой текст sys.stdout.write(), но его использовать нельзя.
# Так случилось что функция print поменяла своё имя и стала называться display.
# Выведите с помощью новой функции display() на экран следующий текст: "Теперь я тут PRINT()"
# Общее количество строк для решения этой задачи не может быть больше 2-х строк, иначе задание не принимается.

#1
# def display(text:str):
#     return print(text)
#
# display("Теперь я тут PRINT()")


################################################################################


# Задание 5:
# Вам дан SET значений:

# uniques = {3,13,15,27,1,4,8,23,19,12,9,2,17}
#
# def delete_num(num):
#     a = list(num)
#     new_set = []
#     for i in a:
#         if i % 2 != 0:
#             new_set.append(i)
#     return set(new_set)
#
# a = delete_num(uniques)
#
# print(a)

# Создайте функцию которая:
# Удалите все чётные значения внутри SET, а оставшиеся отсортирует по убыванию.
# В результате, ваша функция должна вернуть отсортированный SET и неважно, каким будет SET растопленным или замороженным.

################################################################################


# Задание 6:
# В Python есть такой тип Данных как Boolean...
# Создайте TUPLE который ТЕХНИЧЕСКИ состоит из 4 Булевых ЗНАЧЕНИЙ.


#Ernest
# a = (True,False,bool(0),bool(1))
# print(a)

#Matvey

# def spisok_bool():
#     tuplik = ('abc' != 'abc', 12 - 6 > 3, 3+3 > 6, 'c' != 'ac')
#     return tuplik
#
# print(spisok_bool())


################################################################################


# Задание 7:
# Вам дан TUPLE и пустая Dictionary:

# pairs = {}

# В Tuple перечислены элементы, где идёт строгая очерёдность STRING и INTEGER.
# То есть если перед вами элемент типа данных STRING то следующий точно INTEGER и наоборот.
# keys_values = ('one', 1, 2, 'two', 3, 'three', 'four', 4, 'five', 5, 6 'six', 7, 'seven', 'eight', 8, 'nine',9, 10, 'ten', 11, '11', 12 ,'13')
# Проходя по TUPLE необходимо брать элементы по парно, один элемент может относиться только и только к одной паре.
# Ваша задача выявить если элемент является типом данных string() то записывать его как ключ в Dictionary -> pairs.

# Пример:
# pairs ={'one': 1, 'two': 2, 'three': 3, ...}

# def pisok(keys_values):
#
#     lst_keys = []
#     lst_values = []
#
#     keys_values = list(keys_values)
#
#     for i in keys_values:
#         if i == str(i):
#             lst_keys.append(i)
#         else:
#             lst_values.append(i)
#
#     pairs = dict(zip(lst_keys, lst_values))
#     return pairs
#
#
# keys_values = ('one', 1, 2, 'two', 3, 'three', 'four', 4, 'five', 5, 6, 'six', 7, 'seven', 'eight', 8, 'nine',9, 10, 'ten', 11, '11', 12 ,'13')
# print(pisok(keys_values))





# Пример:
# pairs ={'one': 1, 'two': 2, 'three': 3, ...}

################################################################################


# Задание 8:
# Создайте 2 функции input которые спрашивают пользовтеля:
# 1. Какой длины должно быть число.
# 2. Из каких цифр только должно состоять число.
# Если пользователь попросит сгенерировать число длиною меньше 7 символов, скажите что это слишком короткое число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.
# Если пользователь попросит сгенерировать число длиною больше 30 символов, скажите что это слишком длинное число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.
# Если пользователь введёт меньше чем 3 числа во втором input, скажите что он ввёл слишком мало значений и спросите снова.
# Во втором input числа будут вводиться строго либо через запятую либо через пробел.
# Если пользователь использовал и пробелы и запятые во втором input, скажите что он ввёл неправильные значения и спросите числа снова.
# После того как пользователь введёт вам оба верных значения:
# сгенерируйте ему число длиною как он попросил и состоящее только из тех чисел которые он указал.

# def whas_number():
#     import random
#     user_number = []
#     while True:
#         try:
#             a = int(input("What's the length of the max. number? - "))
#             if a < 7 or a > 30:
#                 print("Min or max length of the number must be at least 7,30.")
#             else:
#                 break
#         except:
#             print("Wrong value.\n")
#     while True:
#         try:
#             b = input("What numbers should be in generator?(write number and ',' or ' ') - ")
#             if " " in b and "," in b:
#                 print("Wrong value.\n")
#             elif " " in b:
#                 while True:
#                     b = b.split(" ")
#                     if len(b) < 3:
#                         print("Must be at least 3 numbers.\n")
#                     elif len(b) >= 3:
#                         while len(user_number) < a:
#                             user_number.append(random.choice(b))
#                         return int("".join(user_number))
#                     break
#             elif "," in b:
#                 while True:
#                     b = b.split(",")
#                     if len(b) < 3:
#                         print("Must be at least 3 numbers.\n")
#                     elif len(b) >= 3:
#                         while len(user_number) < a:
#                             user_number.append(random.choice(b))
#                         return int("".join(user_number))
#                     break
#         except:
#             print("Something went wrong...\nTry again.")
# print(whas_number())

# Пример:
# Какой длины должно быть число: 7
# Какие цифры только должны присутствовать: 2,3,5,0,1

# Результат:
# 2201550

# Какой длины должно быть число: 9
# Какие цифры только должны присутствовать: 2 7 5

# Результат:
# 275727572

################################################################################


# Задание 9:
# Попросить пользователя ввести текст.В результате
# вывести процент букв в верхнем регистре(заглавные)
# и в нижнем регистре(прописные)

# def porcent(text):
#     U = []
#     L = []
#
#     for i in text:                           # Определяем количество больших и маленьких букв
#         if i.isupper():
#             U.append(i)
#         elif i.islower():
#             L.append(i)
#
#     try:                                        # Высчитываем процент больших и мальненьких букв
#         summaU = (len(U) + len(L)) / len(U)
#         percentU = 100 / summaU
#         percentL = 100 - percentU
#     except ZeroDivisionError:
#         percentU = 0
#         percentL = 100
#
#     return f'процент маленьких букв - {percentL}, процень больших букв - {percentU}'          # Выводим результат
#
#
# text = input("Print your text here - ")
# print(porcent(text))


################################################################################


# Задание 10:
# Если вы были на Луне сейчас, ваш вес будет 16,5% от вашего веса земли.
# Для его расчета необходимо умножить на 0,165.
# Если в ближайшие 15 лет ваш вес будет увеличиваться на 1 кг каждый год.
# Какой будет ваш вес каждый год на Луне в следующем 15 лет?

# weight = int(input('Print your weight - '))
#
# def weight_on_moon(weight: int):
#
#     weight_moon = (weight / 100) * 16.5
#     return weight_moon
#
# print(weight_on_moon(weight))

################################################################################


# Задание 11:
# Попросить пользователя ввести слова через пробел.
# Отсортировать слова по количеству символов и вывести на экран результат.

# Пример input: сон машина стол книга девочка
# Результат: сон стол книга машина девочка

# text = input("Print your text - ")
#
# def sort(text):
#
#     text = text.split(' ')
#     lst = []
#
#     for i in text:
#         lst.append(i)
#
#     sorting_machine = sorted(lst, key=len)
#
#     return sorting_machine
#
# print(sort(text))

################################################################################



# Задание 12:
# Напишите функцию который будет конвертировать Фаренгейт в Цельсии и
# наоборот.

# weight = input("Print your weight and (F/C) Exemple(123 C) - ")
#
# def convertor(weight):
#
#     weight = weight.split(' ')
#
#     if weight[-1] == "C" or weight[-1] == "c":
#         Fer = int(weight[0]) * 1.8 + 32
#         return f"{Fer} F"
#     elif weight[-1] == "F" or weight[-1] == "f":
#         Ce = (int(weight[0]) - 32) / 1.8
#         return f"{Ce} C"
#
# print(convertor(weight))


# Задание 13:

#     Пользователь делает вклад в размере a рублей сроком на years лет под 10% годовых (каждый год размер его вклада увеличивается на 10%. Эти деньги прибавляются к сумме вклада, и на них в следующем году тоже будут проценты).
#     Написать функцию bank, принимающая аргументы a и years, и возвращающую сумму, которая будет на счету пользователя.
#####################################################################

# def vklad(a, years):
#
#
#     for i in range(years):
#         number = a / 100
#         n = number * 10
#         a = a + n
#
#     return a
#
# a = int(input("Print your amount of money - "))
# years = int(input("Print years - "))
#

# print(vklad(a, years))


# Задание 14:
#     Несколько дней подряд метеоролог измеряет температуру воздуха в своём городе. Ваша программа считывает измеренные им значения и выводит среднее значение температуры за время измерений. Чтобы обозначить конец ввода данных, вводится значение, меньшее -300 (реальная температура не может быть ниже -273.15).
#     При проведении вычислений с действительными числами ответ может незначительно отличаться от математически правильного из-за погрешностей округления; это не повлияет на проверку решения.
########################################################################


# def meteorolog():
#     spisochek = []
#
#     while True:
#         weather = int(input("Print today's temperature - "))
#         if weather < -300:
#             break
#         spisochek.append(weather)
#     return sum(spisochek) / len(spisochek)
#
# print(meteorolog())

